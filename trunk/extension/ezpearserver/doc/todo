TO DO:
======


InstallSide
~~~~~~~~~~~
. pear role (php script) that will install a pear-packaged ezp package
. bundle it as pear package itself (use ezextbuilder for the packaging?)

. investigate use of file-task / postinstall script for that instead of role ?

. investigate more advanced use of roles to bypass the package-in-package limitation


ServerSide
~~~~~~~~~~

PHASE 1:
--------
. implement channelname() tpl operator (allows an ini value to override SiteURL) ?
  - needed when creating a package via cli and want to deploy it standalone

. in templates, urlencode in links all things that might contain spaces

. instructions to add apache redirect (or ez internal redirect) for /channel.xml => /pear/channel.xml

. implement REST api (using views) ...

. content classes (or ezpersistentopbjects? => use 2 handlers for retrieving stuff...) used to define packages/categories/versions

PHASE 2:
--------
. html views besides the rest views (q: shall we implement this in a client extension such as ezextensioninstaller?)
. conversion scripts from ez package xmls to pear xmls
. invoking post-extraction tasks that hook into existing code

PHASE 3:
--------
. implement REST api using ggws/ezrest

. implement xmlrpc API? (see http://pear.php.net/manual/en/guide.migrating.channels.xmlrpcfunctions.php)
  note: it is deprecated by PEAR itself, so...

NOTES:
------
extra info not found in pear package:
- package/install_type
- vendor
- type
- provides
- obsoletes
- conflicts
- role: ezcontentclass/...
- packaging date + host
- uninstall list
- release number: packages always start at ..-1
- ezp version requirement (fulfilled via package nr?)

ideas: store extra info using an ezp namespace, use direct access to xml to finish install/deinstall tasks

info missing in ez package:
- api nr

INVESTIGATION:
==============

Advantages:
- repository management (browsing/) already developed
- can profit of pear tooling - installed by default on every php system - pear instal XXX
- brings eZ closer to the php community
- right time to change package format, since the package installation system is revamped (ie. now or never)

Disavantages:
- needs two namespaces in package xml file to have enough flexibility
- not complete control over pear package format
- missing some features (in repository management/install-deinstall management) ?
- need to reimplement existing functionality

Q: how to manage extensions available for eZP version X ?
A: manage either via requirements in packages or via different channels?
See eg. how debian does it => different channels for every debian release

Managing channels "a la debian"
- pros: easier to list all extensions available for eZP version X
- cons: have to rebuild all packages every 6 months

Managing a single channels "with dependencies" (one pear channel for share.ez.no, different releases of packages require different ez versions)
- pros:
- cons: harder to browse/search for packages available for eZP version X?
